// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cron_logger.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package cron_log_v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WriteLogReq struct {
	Opt                  string     `protobuf:"bytes,1,opt,name=opt,proto3" json:"opt,omitempty" json:"opt" validate:"required"`
	Operator             string     `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty" json:"operator"`
	Ctime                *time.Time `protobuf:"bytes,3,opt,name=ctime,proto3,stdtime" json:"ctime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *WriteLogReq) Reset()         { *m = WriteLogReq{} }
func (m *WriteLogReq) String() string { return proto.CompactTextString(m) }
func (*WriteLogReq) ProtoMessage()    {}
func (*WriteLogReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9ce9aa07b4517a6, []int{0}
}
func (m *WriteLogReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteLogReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteLogReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteLogReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteLogReq.Merge(m, src)
}
func (m *WriteLogReq) XXX_Size() int {
	return m.Size()
}
func (m *WriteLogReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteLogReq.DiscardUnknown(m)
}

var xxx_messageInfo_WriteLogReq proto.InternalMessageInfo

type NoReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NoReply) Reset()         { *m = NoReply{} }
func (m *NoReply) String() string { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()    {}
func (*NoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9ce9aa07b4517a6, []int{1}
}
func (m *NoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoReply.Merge(m, src)
}
func (m *NoReply) XXX_Size() int {
	return m.Size()
}
func (m *NoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NoReply.DiscardUnknown(m)
}

var xxx_messageInfo_NoReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WriteLogReq)(nil), "cron.logger.v1.WriteLogReq")
	proto.RegisterType((*NoReply)(nil), "cron.logger.v1.NoReply")
}

func init() { proto.RegisterFile("cron_logger.proto", fileDescriptor_c9ce9aa07b4517a6) }

var fileDescriptor_c9ce9aa07b4517a6 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4f, 0x4e, 0x02, 0x31,
	0x14, 0xc6, 0xa9, 0xf8, 0x07, 0x4a, 0xa2, 0x71, 0x5c, 0x48, 0x06, 0x33, 0x83, 0x5d, 0xb1, 0xb1,
	0x13, 0xd0, 0xb8, 0x60, 0x65, 0x70, 0x4b, 0x58, 0x4c, 0x4c, 0x4c, 0xdc, 0x98, 0x02, 0xb5, 0xd6,
	0xcc, 0xcc, 0x2b, 0xa5, 0x90, 0x70, 0x0b, 0x97, 0x1e, 0xc2, 0x83, 0xb0, 0xf4, 0x04, 0xa8, 0x78,
	0x03, 0x4e, 0x60, 0xe8, 0xcc, 0xf8, 0x87, 0x5d, 0xdf, 0xfb, 0x7e, 0x5f, 0xf3, 0xbd, 0xf7, 0xf0,
	0xe1, 0x40, 0x43, 0x72, 0x1f, 0x81, 0x10, 0x5c, 0x53, 0xa5, 0xc1, 0x80, 0xb3, 0xbf, 0x6e, 0xd1,
	0xac, 0x35, 0x6d, 0xba, 0x67, 0x42, 0x9a, 0xc7, 0x49, 0x9f, 0x0e, 0x20, 0x0e, 0x04, 0x08, 0x08,
	0x2c, 0xd6, 0x9f, 0x3c, 0xd8, 0xca, 0x16, 0xf6, 0x95, 0xda, 0xdd, 0x9a, 0x00, 0x10, 0x11, 0xff,
	0xa5, 0x78, 0xac, 0xcc, 0x2c, 0x13, 0x4f, 0x32, 0x91, 0x29, 0x19, 0xb0, 0x24, 0x01, 0xc3, 0x8c,
	0x84, 0x64, 0x9c, 0xa9, 0xfe, 0xa6, 0xd5, 0xc8, 0x98, 0x8f, 0x0d, 0x8b, 0x55, 0x0a, 0x90, 0x57,
	0x84, 0x2b, 0xb7, 0x5a, 0x1a, 0xde, 0x05, 0x11, 0xf2, 0x91, 0x73, 0x81, 0x8b, 0xa0, 0x4c, 0x15,
	0xd5, 0x51, 0xa3, 0xdc, 0x21, 0xab, 0x85, 0xef, 0x3d, 0x8d, 0x21, 0x69, 0x13, 0x50, 0x86, 0xd4,
	0xa7, 0x2c, 0x92, 0x43, 0x66, 0x78, 0x9b, 0x68, 0x3e, 0x9a, 0x48, 0xcd, 0x87, 0x24, 0x5c, 0xe3,
	0x4e, 0x80, 0x4b, 0xa0, 0xb8, 0x66, 0x06, 0x74, 0x75, 0xcb, 0x5a, 0x8f, 0x56, 0x0b, 0xff, 0x20,
	0xb7, 0xa6, 0x0a, 0x09, 0x7f, 0x20, 0xe7, 0x12, 0xef, 0x0c, 0xd6, 0x51, 0xaa, 0xc5, 0x3a, 0x6a,
	0x54, 0x5a, 0x2e, 0x4d, 0x73, 0xd2, 0x3c, 0x27, 0xbd, 0xc9, 0x73, 0x76, 0xb6, 0x9f, 0xdf, 0x7d,
	0x14, 0xa6, 0x38, 0x29, 0xe3, 0xbd, 0x1e, 0x84, 0x5c, 0x45, 0xb3, 0x56, 0x0f, 0xe3, 0x6b, 0x0d,
	0x49, 0xd7, 0x6e, 0xd5, 0xb9, 0xc2, 0xa5, 0x7c, 0x0c, 0xa7, 0x46, 0xff, 0xef, 0x9b, 0xfe, 0x19,
	0xd0, 0x3d, 0xde, 0x14, 0xb3, 0xff, 0x3a, 0xa7, 0xf3, 0x4f, 0xaf, 0x30, 0x5f, 0x7a, 0xe8, 0x6d,
	0xe9, 0xa1, 0x8f, 0xa5, 0x87, 0x5e, 0xbe, 0xbc, 0xc2, 0x5d, 0x25, 0xbf, 0x26, 0x9d, 0x36, 0xfb,
	0xbb, 0x36, 0xde, 0xf9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x18, 0xe8, 0x5a, 0xe3, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CronLoggerClient is the client API for CronLogger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronLoggerClient interface {
	WriteLog(ctx context.Context, in *WriteLogReq, opts ...grpc.CallOption) (*NoReply, error)
}

type cronLoggerClient struct {
	cc *grpc.ClientConn
}

func NewCronLoggerClient(cc *grpc.ClientConn) CronLoggerClient {
	return &cronLoggerClient{cc}
}

func (c *cronLoggerClient) WriteLog(ctx context.Context, in *WriteLogReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := c.cc.Invoke(ctx, "/cron.logger.v1.CronLogger/WriteLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronLoggerServer is the server API for CronLogger service.
type CronLoggerServer interface {
	WriteLog(context.Context, *WriteLogReq) (*NoReply, error)
}

// UnimplementedCronLoggerServer can be embedded to have forward compatible implementations.
type UnimplementedCronLoggerServer struct {
}

func (*UnimplementedCronLoggerServer) WriteLog(ctx context.Context, req *WriteLogReq) (*NoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteLog not implemented")
}

func RegisterCronLoggerServer(s *grpc.Server, srv CronLoggerServer) {
	s.RegisterService(&_CronLogger_serviceDesc, srv)
}

func _CronLogger_WriteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronLoggerServer).WriteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cron.logger.v1.CronLogger/WriteLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronLoggerServer).WriteLog(ctx, req.(*WriteLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronLogger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cron.logger.v1.CronLogger",
	HandlerType: (*CronLoggerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteLog",
			Handler:    _CronLogger_WriteLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cron_logger.proto",
}

func (m *WriteLogReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteLogReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteLogReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ctime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Ctime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Ctime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintCronLogger(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintCronLogger(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Opt) > 0 {
		i -= len(m.Opt)
		copy(dAtA[i:], m.Opt)
		i = encodeVarintCronLogger(dAtA, i, uint64(len(m.Opt)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintCronLogger(dAtA []byte, offset int, v uint64) int {
	offset -= sovCronLogger(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WriteLogReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Opt)
	if l > 0 {
		n += 1 + l + sovCronLogger(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovCronLogger(uint64(l))
	}
	if m.Ctime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Ctime)
		n += 1 + l + sovCronLogger(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCronLogger(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCronLogger(x uint64) (n int) {
	return sovCronLogger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WriteLogReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteLogReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteLogReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronLogger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCronLogger
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCronLogger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCronLogger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCronLogger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCronLogger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ctime == nil {
				m.Ctime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Ctime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCronLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCronLogger
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCronLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCronLogger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCronLogger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCronLogger
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCronLogger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCronLogger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCronLogger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronLogger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCronLogger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCronLogger
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCronLogger
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCronLogger
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCronLogger        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCronLogger          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCronLogger = fmt.Errorf("proto: unexpected end of group")
)
