// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"way-jasy-cron/cron-logger/internal/model/ent/logger"

	"github.com/facebook/ent/dialect/sql"
)

// Logger is the model entity for the Logger schema.
type Logger struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Log holds the value of the "log" field.
	Log string `json:"log,omitempty"`
	// Operator holds the value of the "operator" field.
	Operator string `json:"operator,omitempty"`
	// Ctime holds the value of the "ctime" field.
	Ctime time.Time `json:"ctime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Logger) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case logger.FieldID:
			values[i] = &sql.NullInt64{}
		case logger.FieldLog, logger.FieldOperator:
			values[i] = &sql.NullString{}
		case logger.FieldCtime:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Logger", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Logger fields.
func (l *Logger) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logger.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case logger.FieldLog:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field log", values[i])
			} else if value.Valid {
				l.Log = value.String
			}
		case logger.FieldOperator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				l.Operator = value.String
			}
		case logger.FieldCtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				l.Ctime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Logger.
// Note that you need to call Logger.Unwrap() before calling this method if this Logger
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Logger) Update() *LoggerUpdateOne {
	return (&LoggerClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Logger entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Logger) Unwrap() *Logger {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Logger is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Logger) String() string {
	var builder strings.Builder
	builder.WriteString("Logger(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	builder.WriteString(", log=")
	builder.WriteString(l.Log)
	builder.WriteString(", operator=")
	builder.WriteString(l.Operator)
	builder.WriteString(", ctime=")
	builder.WriteString(l.Ctime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Loggers is a parsable slice of Logger.
type Loggers []*Logger

func (l Loggers) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
