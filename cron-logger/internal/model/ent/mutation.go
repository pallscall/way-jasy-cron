// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"
	"way-jasy-cron/cron-logger/internal/model/ent/logger"
	"way-jasy-cron/cron-logger/internal/model/ent/predicate"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLogger = "Logger"
)

// LoggerMutation represents an operation that mutates the Logger nodes in the graph.
type LoggerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	log           *string
	operator      *string
	ctime         *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Logger, error)
	predicates    []predicate.Logger
}

var _ ent.Mutation = (*LoggerMutation)(nil)

// loggerOption allows management of the mutation configuration using functional options.
type loggerOption func(*LoggerMutation)

// newLoggerMutation creates new mutation for the Logger entity.
func newLoggerMutation(c config, op Op, opts ...loggerOption) *LoggerMutation {
	m := &LoggerMutation{
		config:        c,
		op:            op,
		typ:           TypeLogger,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLoggerID sets the ID field of the mutation.
func withLoggerID(id int) loggerOption {
	return func(m *LoggerMutation) {
		var (
			err   error
			once  sync.Once
			value *Logger
		)
		m.oldValue = func(ctx context.Context) (*Logger, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Logger.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLogger sets the old Logger of the mutation.
func withLogger(node *Logger) loggerOption {
	return func(m *LoggerMutation) {
		m.oldValue = func(context.Context) (*Logger, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LoggerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LoggerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Logger entities.
func (m *LoggerMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *LoggerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetLog sets the "log" field.
func (m *LoggerMutation) SetLog(s string) {
	m.log = &s
}

// Log returns the value of the "log" field in the mutation.
func (m *LoggerMutation) Log() (r string, exists bool) {
	v := m.log
	if v == nil {
		return
	}
	return *v, true
}

// OldLog returns the old "log" field's value of the Logger entity.
// If the Logger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggerMutation) OldLog(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLog is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLog requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLog: %w", err)
	}
	return oldValue.Log, nil
}

// ResetLog resets all changes to the "log" field.
func (m *LoggerMutation) ResetLog() {
	m.log = nil
}

// SetOperator sets the "operator" field.
func (m *LoggerMutation) SetOperator(s string) {
	m.operator = &s
}

// Operator returns the value of the "operator" field in the mutation.
func (m *LoggerMutation) Operator() (r string, exists bool) {
	v := m.operator
	if v == nil {
		return
	}
	return *v, true
}

// OldOperator returns the old "operator" field's value of the Logger entity.
// If the Logger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggerMutation) OldOperator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOperator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOperator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperator: %w", err)
	}
	return oldValue.Operator, nil
}

// ResetOperator resets all changes to the "operator" field.
func (m *LoggerMutation) ResetOperator() {
	m.operator = nil
}

// SetCtime sets the "ctime" field.
func (m *LoggerMutation) SetCtime(t time.Time) {
	m.ctime = &t
}

// Ctime returns the value of the "ctime" field in the mutation.
func (m *LoggerMutation) Ctime() (r time.Time, exists bool) {
	v := m.ctime
	if v == nil {
		return
	}
	return *v, true
}

// OldCtime returns the old "ctime" field's value of the Logger entity.
// If the Logger object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LoggerMutation) OldCtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCtime: %w", err)
	}
	return oldValue.Ctime, nil
}

// ClearCtime clears the value of the "ctime" field.
func (m *LoggerMutation) ClearCtime() {
	m.ctime = nil
	m.clearedFields[logger.FieldCtime] = struct{}{}
}

// CtimeCleared returns if the "ctime" field was cleared in this mutation.
func (m *LoggerMutation) CtimeCleared() bool {
	_, ok := m.clearedFields[logger.FieldCtime]
	return ok
}

// ResetCtime resets all changes to the "ctime" field.
func (m *LoggerMutation) ResetCtime() {
	m.ctime = nil
	delete(m.clearedFields, logger.FieldCtime)
}

// Op returns the operation name.
func (m *LoggerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Logger).
func (m *LoggerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LoggerMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.log != nil {
		fields = append(fields, logger.FieldLog)
	}
	if m.operator != nil {
		fields = append(fields, logger.FieldOperator)
	}
	if m.ctime != nil {
		fields = append(fields, logger.FieldCtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LoggerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case logger.FieldLog:
		return m.Log()
	case logger.FieldOperator:
		return m.Operator()
	case logger.FieldCtime:
		return m.Ctime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LoggerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case logger.FieldLog:
		return m.OldLog(ctx)
	case logger.FieldOperator:
		return m.OldOperator(ctx)
	case logger.FieldCtime:
		return m.OldCtime(ctx)
	}
	return nil, fmt.Errorf("unknown Logger field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoggerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case logger.FieldLog:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLog(v)
		return nil
	case logger.FieldOperator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperator(v)
		return nil
	case logger.FieldCtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCtime(v)
		return nil
	}
	return fmt.Errorf("unknown Logger field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LoggerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LoggerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LoggerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Logger numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LoggerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(logger.FieldCtime) {
		fields = append(fields, logger.FieldCtime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LoggerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LoggerMutation) ClearField(name string) error {
	switch name {
	case logger.FieldCtime:
		m.ClearCtime()
		return nil
	}
	return fmt.Errorf("unknown Logger nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LoggerMutation) ResetField(name string) error {
	switch name {
	case logger.FieldLog:
		m.ResetLog()
		return nil
	case logger.FieldOperator:
		m.ResetOperator()
		return nil
	case logger.FieldCtime:
		m.ResetCtime()
		return nil
	}
	return fmt.Errorf("unknown Logger field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LoggerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LoggerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LoggerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LoggerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LoggerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LoggerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LoggerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Logger unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LoggerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Logger edge %s", name)
}
