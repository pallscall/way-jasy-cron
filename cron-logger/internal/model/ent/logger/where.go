// Code generated by entc, DO NOT EDIT.

package logger

import (
	"time"
	"way-jasy-cron/cron-logger/internal/model/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Log applies equality check predicate on the "log" field. It's identical to LogEQ.
func Log(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLog), v))
	})
}

// Operator applies equality check predicate on the "operator" field. It's identical to OperatorEQ.
func Operator(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperator), v))
	})
}

// Ctime applies equality check predicate on the "ctime" field. It's identical to CtimeEQ.
func Ctime(v time.Time) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// LogEQ applies the EQ predicate on the "log" field.
func LogEQ(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLog), v))
	})
}

// LogNEQ applies the NEQ predicate on the "log" field.
func LogNEQ(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLog), v))
	})
}

// LogIn applies the In predicate on the "log" field.
func LogIn(vs ...string) predicate.Logger {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Logger(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLog), v...))
	})
}

// LogNotIn applies the NotIn predicate on the "log" field.
func LogNotIn(vs ...string) predicate.Logger {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Logger(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLog), v...))
	})
}

// LogGT applies the GT predicate on the "log" field.
func LogGT(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLog), v))
	})
}

// LogGTE applies the GTE predicate on the "log" field.
func LogGTE(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLog), v))
	})
}

// LogLT applies the LT predicate on the "log" field.
func LogLT(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLog), v))
	})
}

// LogLTE applies the LTE predicate on the "log" field.
func LogLTE(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLog), v))
	})
}

// LogContains applies the Contains predicate on the "log" field.
func LogContains(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLog), v))
	})
}

// LogHasPrefix applies the HasPrefix predicate on the "log" field.
func LogHasPrefix(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLog), v))
	})
}

// LogHasSuffix applies the HasSuffix predicate on the "log" field.
func LogHasSuffix(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLog), v))
	})
}

// LogEqualFold applies the EqualFold predicate on the "log" field.
func LogEqualFold(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLog), v))
	})
}

// LogContainsFold applies the ContainsFold predicate on the "log" field.
func LogContainsFold(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLog), v))
	})
}

// OperatorEQ applies the EQ predicate on the "operator" field.
func OperatorEQ(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOperator), v))
	})
}

// OperatorNEQ applies the NEQ predicate on the "operator" field.
func OperatorNEQ(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOperator), v))
	})
}

// OperatorIn applies the In predicate on the "operator" field.
func OperatorIn(vs ...string) predicate.Logger {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Logger(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOperator), v...))
	})
}

// OperatorNotIn applies the NotIn predicate on the "operator" field.
func OperatorNotIn(vs ...string) predicate.Logger {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Logger(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOperator), v...))
	})
}

// OperatorGT applies the GT predicate on the "operator" field.
func OperatorGT(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOperator), v))
	})
}

// OperatorGTE applies the GTE predicate on the "operator" field.
func OperatorGTE(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOperator), v))
	})
}

// OperatorLT applies the LT predicate on the "operator" field.
func OperatorLT(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOperator), v))
	})
}

// OperatorLTE applies the LTE predicate on the "operator" field.
func OperatorLTE(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOperator), v))
	})
}

// OperatorContains applies the Contains predicate on the "operator" field.
func OperatorContains(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOperator), v))
	})
}

// OperatorHasPrefix applies the HasPrefix predicate on the "operator" field.
func OperatorHasPrefix(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOperator), v))
	})
}

// OperatorHasSuffix applies the HasSuffix predicate on the "operator" field.
func OperatorHasSuffix(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOperator), v))
	})
}

// OperatorEqualFold applies the EqualFold predicate on the "operator" field.
func OperatorEqualFold(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOperator), v))
	})
}

// OperatorContainsFold applies the ContainsFold predicate on the "operator" field.
func OperatorContainsFold(v string) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOperator), v))
	})
}

// CtimeEQ applies the EQ predicate on the "ctime" field.
func CtimeEQ(v time.Time) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCtime), v))
	})
}

// CtimeNEQ applies the NEQ predicate on the "ctime" field.
func CtimeNEQ(v time.Time) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCtime), v))
	})
}

// CtimeIn applies the In predicate on the "ctime" field.
func CtimeIn(vs ...time.Time) predicate.Logger {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Logger(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCtime), v...))
	})
}

// CtimeNotIn applies the NotIn predicate on the "ctime" field.
func CtimeNotIn(vs ...time.Time) predicate.Logger {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Logger(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCtime), v...))
	})
}

// CtimeGT applies the GT predicate on the "ctime" field.
func CtimeGT(v time.Time) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCtime), v))
	})
}

// CtimeGTE applies the GTE predicate on the "ctime" field.
func CtimeGTE(v time.Time) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCtime), v))
	})
}

// CtimeLT applies the LT predicate on the "ctime" field.
func CtimeLT(v time.Time) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCtime), v))
	})
}

// CtimeLTE applies the LTE predicate on the "ctime" field.
func CtimeLTE(v time.Time) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCtime), v))
	})
}

// CtimeIsNil applies the IsNil predicate on the "ctime" field.
func CtimeIsNil() predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCtime)))
	})
}

// CtimeNotNil applies the NotNil predicate on the "ctime" field.
func CtimeNotNil() predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCtime)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Logger) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Logger) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Logger) predicate.Logger {
	return predicate.Logger(func(s *sql.Selector) {
		p(s.Not())
	})
}
