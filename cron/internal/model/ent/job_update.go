// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"way-jasy-cron/cron/internal/model/ent/job"
	"way-jasy-cron/cron/internal/model/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where adds a new predicate for the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.predicates = append(ju.mutation.predicates, ps...)
	return ju
}

// SetName sets the "name" field.
func (ju *JobUpdate) SetName(s string) *JobUpdate {
	ju.mutation.SetName(s)
	return ju
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ju *JobUpdate) SetNillableName(s *string) *JobUpdate {
	if s != nil {
		ju.SetName(*s)
	}
	return ju
}

// SetCreator sets the "creator" field.
func (ju *JobUpdate) SetCreator(s string) *JobUpdate {
	ju.mutation.SetCreator(s)
	return ju
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCreator(s *string) *JobUpdate {
	if s != nil {
		ju.SetCreator(*s)
	}
	return ju
}

// SetURL sets the "url" field.
func (ju *JobUpdate) SetURL(s string) *JobUpdate {
	ju.mutation.SetURL(s)
	return ju
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ju *JobUpdate) SetNillableURL(s *string) *JobUpdate {
	if s != nil {
		ju.SetURL(*s)
	}
	return ju
}

// SetSpec sets the "spec" field.
func (ju *JobUpdate) SetSpec(s string) *JobUpdate {
	ju.mutation.SetSpec(s)
	return ju
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (ju *JobUpdate) SetNillableSpec(s *string) *JobUpdate {
	if s != nil {
		ju.SetSpec(*s)
	}
	return ju
}

// SetComment sets the "comment" field.
func (ju *JobUpdate) SetComment(s string) *JobUpdate {
	ju.mutation.SetComment(s)
	return ju
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (ju *JobUpdate) SetNillableComment(s *string) *JobUpdate {
	if s != nil {
		ju.SetComment(*s)
	}
	return ju
}

// SetUpdater sets the "updater" field.
func (ju *JobUpdate) SetUpdater(s string) *JobUpdate {
	ju.mutation.SetUpdater(s)
	return ju
}

// SetNillableUpdater sets the "updater" field if the given value is not nil.
func (ju *JobUpdate) SetNillableUpdater(s *string) *JobUpdate {
	if s != nil {
		ju.SetUpdater(*s)
	}
	return ju
}

// SetMethod sets the "method" field.
func (ju *JobUpdate) SetMethod(s string) *JobUpdate {
	ju.mutation.SetMethod(s)
	return ju
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (ju *JobUpdate) SetNillableMethod(s *string) *JobUpdate {
	if s != nil {
		ju.SetMethod(*s)
	}
	return ju
}

// SetBody sets the "body" field.
func (ju *JobUpdate) SetBody(s string) *JobUpdate {
	ju.mutation.SetBody(s)
	return ju
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (ju *JobUpdate) SetNillableBody(s *string) *JobUpdate {
	if s != nil {
		ju.SetBody(*s)
	}
	return ju
}

// SetHeader sets the "header" field.
func (ju *JobUpdate) SetHeader(s string) *JobUpdate {
	ju.mutation.SetHeader(s)
	return ju
}

// SetNillableHeader sets the "header" field if the given value is not nil.
func (ju *JobUpdate) SetNillableHeader(s *string) *JobUpdate {
	if s != nil {
		ju.SetHeader(*s)
	}
	return ju
}

// SetStoppable sets the "stoppable" field.
func (ju *JobUpdate) SetStoppable(i int) *JobUpdate {
	ju.mutation.ResetStoppable()
	ju.mutation.SetStoppable(i)
	return ju
}

// SetNillableStoppable sets the "stoppable" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStoppable(i *int) *JobUpdate {
	if i != nil {
		ju.SetStoppable(*i)
	}
	return ju
}

// AddStoppable adds i to the "stoppable" field.
func (ju *JobUpdate) AddStoppable(i int) *JobUpdate {
	ju.mutation.AddStoppable(i)
	return ju
}

// SetStatus sets the "status" field.
func (ju *JobUpdate) SetStatus(i int) *JobUpdate {
	ju.mutation.ResetStatus()
	ju.mutation.SetStatus(i)
	return ju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStatus(i *int) *JobUpdate {
	if i != nil {
		ju.SetStatus(*i)
	}
	return ju
}

// AddStatus adds i to the "status" field.
func (ju *JobUpdate) AddStatus(i int) *JobUpdate {
	ju.mutation.AddStatus(i)
	return ju
}

// SetCtime sets the "ctime" field.
func (ju *JobUpdate) SetCtime(t time.Time) *JobUpdate {
	ju.mutation.SetCtime(t)
	return ju
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCtime(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetCtime(*t)
	}
	return ju
}

// ClearCtime clears the value of the "ctime" field.
func (ju *JobUpdate) ClearCtime() *JobUpdate {
	ju.mutation.ClearCtime()
	return ju
}

// SetMtime sets the "mtime" field.
func (ju *JobUpdate) SetMtime(t time.Time) *JobUpdate {
	ju.mutation.SetMtime(t)
	return ju
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (ju *JobUpdate) SetNillableMtime(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetMtime(*t)
	}
	return ju
}

// ClearMtime clears the value of the "mtime" field.
func (ju *JobUpdate) ClearMtime() *JobUpdate {
	ju.mutation.ClearMtime()
	return ju
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ju.hooks) == 0 {
		affected, err = ju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ju.mutation = mutation
			affected, err = ju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ju.hooks) - 1; i >= 0; i-- {
			mut = ju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
	}
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldName,
		})
	}
	if value, ok := ju.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldCreator,
		})
	}
	if value, ok := ju.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldURL,
		})
	}
	if value, ok := ju.mutation.Spec(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldSpec,
		})
	}
	if value, ok := ju.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldComment,
		})
	}
	if value, ok := ju.mutation.Updater(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldUpdater,
		})
	}
	if value, ok := ju.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldMethod,
		})
	}
	if value, ok := ju.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldBody,
		})
	}
	if value, ok := ju.mutation.Header(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldHeader,
		})
	}
	if value, ok := ju.mutation.Stoppable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: job.FieldStoppable,
		})
	}
	if value, ok := ju.mutation.AddedStoppable(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: job.FieldStoppable,
		})
	}
	if value, ok := ju.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: job.FieldStatus,
		})
	}
	if value, ok := ju.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: job.FieldStatus,
		})
	}
	if value, ok := ju.mutation.Ctime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldCtime,
		})
	}
	if ju.mutation.CtimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: job.FieldCtime,
		})
	}
	if value, ok := ju.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldMtime,
		})
	}
	if ju.mutation.MtimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: job.FieldMtime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// SetName sets the "name" field.
func (juo *JobUpdateOne) SetName(s string) *JobUpdateOne {
	juo.mutation.SetName(s)
	return juo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableName(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetName(*s)
	}
	return juo
}

// SetCreator sets the "creator" field.
func (juo *JobUpdateOne) SetCreator(s string) *JobUpdateOne {
	juo.mutation.SetCreator(s)
	return juo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreator(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetCreator(*s)
	}
	return juo
}

// SetURL sets the "url" field.
func (juo *JobUpdateOne) SetURL(s string) *JobUpdateOne {
	juo.mutation.SetURL(s)
	return juo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableURL(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetURL(*s)
	}
	return juo
}

// SetSpec sets the "spec" field.
func (juo *JobUpdateOne) SetSpec(s string) *JobUpdateOne {
	juo.mutation.SetSpec(s)
	return juo
}

// SetNillableSpec sets the "spec" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableSpec(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetSpec(*s)
	}
	return juo
}

// SetComment sets the "comment" field.
func (juo *JobUpdateOne) SetComment(s string) *JobUpdateOne {
	juo.mutation.SetComment(s)
	return juo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableComment(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetComment(*s)
	}
	return juo
}

// SetUpdater sets the "updater" field.
func (juo *JobUpdateOne) SetUpdater(s string) *JobUpdateOne {
	juo.mutation.SetUpdater(s)
	return juo
}

// SetNillableUpdater sets the "updater" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableUpdater(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetUpdater(*s)
	}
	return juo
}

// SetMethod sets the "method" field.
func (juo *JobUpdateOne) SetMethod(s string) *JobUpdateOne {
	juo.mutation.SetMethod(s)
	return juo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableMethod(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetMethod(*s)
	}
	return juo
}

// SetBody sets the "body" field.
func (juo *JobUpdateOne) SetBody(s string) *JobUpdateOne {
	juo.mutation.SetBody(s)
	return juo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableBody(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetBody(*s)
	}
	return juo
}

// SetHeader sets the "header" field.
func (juo *JobUpdateOne) SetHeader(s string) *JobUpdateOne {
	juo.mutation.SetHeader(s)
	return juo
}

// SetNillableHeader sets the "header" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableHeader(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetHeader(*s)
	}
	return juo
}

// SetStoppable sets the "stoppable" field.
func (juo *JobUpdateOne) SetStoppable(i int) *JobUpdateOne {
	juo.mutation.ResetStoppable()
	juo.mutation.SetStoppable(i)
	return juo
}

// SetNillableStoppable sets the "stoppable" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStoppable(i *int) *JobUpdateOne {
	if i != nil {
		juo.SetStoppable(*i)
	}
	return juo
}

// AddStoppable adds i to the "stoppable" field.
func (juo *JobUpdateOne) AddStoppable(i int) *JobUpdateOne {
	juo.mutation.AddStoppable(i)
	return juo
}

// SetStatus sets the "status" field.
func (juo *JobUpdateOne) SetStatus(i int) *JobUpdateOne {
	juo.mutation.ResetStatus()
	juo.mutation.SetStatus(i)
	return juo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStatus(i *int) *JobUpdateOne {
	if i != nil {
		juo.SetStatus(*i)
	}
	return juo
}

// AddStatus adds i to the "status" field.
func (juo *JobUpdateOne) AddStatus(i int) *JobUpdateOne {
	juo.mutation.AddStatus(i)
	return juo
}

// SetCtime sets the "ctime" field.
func (juo *JobUpdateOne) SetCtime(t time.Time) *JobUpdateOne {
	juo.mutation.SetCtime(t)
	return juo
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCtime(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetCtime(*t)
	}
	return juo
}

// ClearCtime clears the value of the "ctime" field.
func (juo *JobUpdateOne) ClearCtime() *JobUpdateOne {
	juo.mutation.ClearCtime()
	return juo
}

// SetMtime sets the "mtime" field.
func (juo *JobUpdateOne) SetMtime(t time.Time) *JobUpdateOne {
	juo.mutation.SetMtime(t)
	return juo
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableMtime(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetMtime(*t)
	}
	return juo
}

// ClearMtime clears the value of the "mtime" field.
func (juo *JobUpdateOne) ClearMtime() *JobUpdateOne {
	juo.mutation.ClearMtime()
	return juo
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	var (
		err  error
		node *Job
	)
	if len(juo.hooks) == 0 {
		node, err = juo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			juo.mutation = mutation
			node, err = juo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(juo.hooks) - 1; i >= 0; i-- {
			mut = juo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, juo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
	}
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Job.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := juo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldName,
		})
	}
	if value, ok := juo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldCreator,
		})
	}
	if value, ok := juo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldURL,
		})
	}
	if value, ok := juo.mutation.Spec(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldSpec,
		})
	}
	if value, ok := juo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldComment,
		})
	}
	if value, ok := juo.mutation.Updater(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldUpdater,
		})
	}
	if value, ok := juo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldMethod,
		})
	}
	if value, ok := juo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldBody,
		})
	}
	if value, ok := juo.mutation.Header(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldHeader,
		})
	}
	if value, ok := juo.mutation.Stoppable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: job.FieldStoppable,
		})
	}
	if value, ok := juo.mutation.AddedStoppable(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: job.FieldStoppable,
		})
	}
	if value, ok := juo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: job.FieldStatus,
		})
	}
	if value, ok := juo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: job.FieldStatus,
		})
	}
	if value, ok := juo.mutation.Ctime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldCtime,
		})
	}
	if juo.mutation.CtimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: job.FieldCtime,
		})
	}
	if value, ok := juo.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldMtime,
		})
	}
	if juo.mutation.MtimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: job.FieldMtime,
		})
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
