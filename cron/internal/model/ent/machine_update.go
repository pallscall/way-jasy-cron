// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"
	"way-jasy-cron/cron/internal/model/ent/machine"
	"way-jasy-cron/cron/internal/model/ent/predicate"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// MachineUpdate is the builder for updating Machine entities.
type MachineUpdate struct {
	config
	hooks    []Hook
	mutation *MachineMutation
}

// Where adds a new predicate for the MachineUpdate builder.
func (mu *MachineUpdate) Where(ps ...predicate.Machine) *MachineUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetHost sets the "host" field.
func (mu *MachineUpdate) SetHost(s string) *MachineUpdate {
	mu.mutation.SetHost(s)
	return mu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (mu *MachineUpdate) SetNillableHost(s *string) *MachineUpdate {
	if s != nil {
		mu.SetHost(*s)
	}
	return mu
}

// SetPort sets the "port" field.
func (mu *MachineUpdate) SetPort(i int) *MachineUpdate {
	mu.mutation.ResetPort()
	mu.mutation.SetPort(i)
	return mu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (mu *MachineUpdate) SetNillablePort(i *int) *MachineUpdate {
	if i != nil {
		mu.SetPort(*i)
	}
	return mu
}

// AddPort adds i to the "port" field.
func (mu *MachineUpdate) AddPort(i int) *MachineUpdate {
	mu.mutation.AddPort(i)
	return mu
}

// SetUsername sets the "username" field.
func (mu *MachineUpdate) SetUsername(s string) *MachineUpdate {
	mu.mutation.SetUsername(s)
	return mu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (mu *MachineUpdate) SetNillableUsername(s *string) *MachineUpdate {
	if s != nil {
		mu.SetUsername(*s)
	}
	return mu
}

// SetPassword sets the "password" field.
func (mu *MachineUpdate) SetPassword(s string) *MachineUpdate {
	mu.mutation.SetPassword(s)
	return mu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (mu *MachineUpdate) SetNillablePassword(s *string) *MachineUpdate {
	if s != nil {
		mu.SetPassword(*s)
	}
	return mu
}

// SetComment sets the "comment" field.
func (mu *MachineUpdate) SetComment(s string) *MachineUpdate {
	mu.mutation.SetComment(s)
	return mu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (mu *MachineUpdate) SetNillableComment(s *string) *MachineUpdate {
	if s != nil {
		mu.SetComment(*s)
	}
	return mu
}

// SetCommand sets the "command" field.
func (mu *MachineUpdate) SetCommand(s string) *MachineUpdate {
	mu.mutation.SetCommand(s)
	return mu
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (mu *MachineUpdate) SetNillableCommand(s *string) *MachineUpdate {
	if s != nil {
		mu.SetCommand(*s)
	}
	return mu
}

// SetStatus sets the "status" field.
func (mu *MachineUpdate) SetStatus(i int) *MachineUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(i)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MachineUpdate) SetNillableStatus(i *int) *MachineUpdate {
	if i != nil {
		mu.SetStatus(*i)
	}
	return mu
}

// AddStatus adds i to the "status" field.
func (mu *MachineUpdate) AddStatus(i int) *MachineUpdate {
	mu.mutation.AddStatus(i)
	return mu
}

// SetCtime sets the "ctime" field.
func (mu *MachineUpdate) SetCtime(t time.Time) *MachineUpdate {
	mu.mutation.SetCtime(t)
	return mu
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (mu *MachineUpdate) SetNillableCtime(t *time.Time) *MachineUpdate {
	if t != nil {
		mu.SetCtime(*t)
	}
	return mu
}

// ClearCtime clears the value of the "ctime" field.
func (mu *MachineUpdate) ClearCtime() *MachineUpdate {
	mu.mutation.ClearCtime()
	return mu
}

// SetMtime sets the "mtime" field.
func (mu *MachineUpdate) SetMtime(t time.Time) *MachineUpdate {
	mu.mutation.SetMtime(t)
	return mu
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (mu *MachineUpdate) SetNillableMtime(t *time.Time) *MachineUpdate {
	if t != nil {
		mu.SetMtime(*t)
	}
	return mu
}

// ClearMtime clears the value of the "mtime" field.
func (mu *MachineUpdate) ClearMtime() *MachineUpdate {
	mu.mutation.ClearMtime()
	return mu
}

// Mutation returns the MachineMutation object of the builder.
func (mu *MachineUpdate) Mutation() *MachineMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MachineUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MachineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MachineUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MachineUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MachineUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MachineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   machine.Table,
			Columns: machine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: machine.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Host(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldHost,
		})
	}
	if value, ok := mu.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: machine.FieldPort,
		})
	}
	if value, ok := mu.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: machine.FieldPort,
		})
	}
	if value, ok := mu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldUsername,
		})
	}
	if value, ok := mu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldPassword,
		})
	}
	if value, ok := mu.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldComment,
		})
	}
	if value, ok := mu.mutation.Command(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldCommand,
		})
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: machine.FieldStatus,
		})
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: machine.FieldStatus,
		})
	}
	if value, ok := mu.mutation.Ctime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: machine.FieldCtime,
		})
	}
	if mu.mutation.CtimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: machine.FieldCtime,
		})
	}
	if value, ok := mu.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: machine.FieldMtime,
		})
	}
	if mu.mutation.MtimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: machine.FieldMtime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{machine.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MachineUpdateOne is the builder for updating a single Machine entity.
type MachineUpdateOne struct {
	config
	hooks    []Hook
	mutation *MachineMutation
}

// SetHost sets the "host" field.
func (muo *MachineUpdateOne) SetHost(s string) *MachineUpdateOne {
	muo.mutation.SetHost(s)
	return muo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (muo *MachineUpdateOne) SetNillableHost(s *string) *MachineUpdateOne {
	if s != nil {
		muo.SetHost(*s)
	}
	return muo
}

// SetPort sets the "port" field.
func (muo *MachineUpdateOne) SetPort(i int) *MachineUpdateOne {
	muo.mutation.ResetPort()
	muo.mutation.SetPort(i)
	return muo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (muo *MachineUpdateOne) SetNillablePort(i *int) *MachineUpdateOne {
	if i != nil {
		muo.SetPort(*i)
	}
	return muo
}

// AddPort adds i to the "port" field.
func (muo *MachineUpdateOne) AddPort(i int) *MachineUpdateOne {
	muo.mutation.AddPort(i)
	return muo
}

// SetUsername sets the "username" field.
func (muo *MachineUpdateOne) SetUsername(s string) *MachineUpdateOne {
	muo.mutation.SetUsername(s)
	return muo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (muo *MachineUpdateOne) SetNillableUsername(s *string) *MachineUpdateOne {
	if s != nil {
		muo.SetUsername(*s)
	}
	return muo
}

// SetPassword sets the "password" field.
func (muo *MachineUpdateOne) SetPassword(s string) *MachineUpdateOne {
	muo.mutation.SetPassword(s)
	return muo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (muo *MachineUpdateOne) SetNillablePassword(s *string) *MachineUpdateOne {
	if s != nil {
		muo.SetPassword(*s)
	}
	return muo
}

// SetComment sets the "comment" field.
func (muo *MachineUpdateOne) SetComment(s string) *MachineUpdateOne {
	muo.mutation.SetComment(s)
	return muo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (muo *MachineUpdateOne) SetNillableComment(s *string) *MachineUpdateOne {
	if s != nil {
		muo.SetComment(*s)
	}
	return muo
}

// SetCommand sets the "command" field.
func (muo *MachineUpdateOne) SetCommand(s string) *MachineUpdateOne {
	muo.mutation.SetCommand(s)
	return muo
}

// SetNillableCommand sets the "command" field if the given value is not nil.
func (muo *MachineUpdateOne) SetNillableCommand(s *string) *MachineUpdateOne {
	if s != nil {
		muo.SetCommand(*s)
	}
	return muo
}

// SetStatus sets the "status" field.
func (muo *MachineUpdateOne) SetStatus(i int) *MachineUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(i)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MachineUpdateOne) SetNillableStatus(i *int) *MachineUpdateOne {
	if i != nil {
		muo.SetStatus(*i)
	}
	return muo
}

// AddStatus adds i to the "status" field.
func (muo *MachineUpdateOne) AddStatus(i int) *MachineUpdateOne {
	muo.mutation.AddStatus(i)
	return muo
}

// SetCtime sets the "ctime" field.
func (muo *MachineUpdateOne) SetCtime(t time.Time) *MachineUpdateOne {
	muo.mutation.SetCtime(t)
	return muo
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (muo *MachineUpdateOne) SetNillableCtime(t *time.Time) *MachineUpdateOne {
	if t != nil {
		muo.SetCtime(*t)
	}
	return muo
}

// ClearCtime clears the value of the "ctime" field.
func (muo *MachineUpdateOne) ClearCtime() *MachineUpdateOne {
	muo.mutation.ClearCtime()
	return muo
}

// SetMtime sets the "mtime" field.
func (muo *MachineUpdateOne) SetMtime(t time.Time) *MachineUpdateOne {
	muo.mutation.SetMtime(t)
	return muo
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (muo *MachineUpdateOne) SetNillableMtime(t *time.Time) *MachineUpdateOne {
	if t != nil {
		muo.SetMtime(*t)
	}
	return muo
}

// ClearMtime clears the value of the "mtime" field.
func (muo *MachineUpdateOne) ClearMtime() *MachineUpdateOne {
	muo.mutation.ClearMtime()
	return muo
}

// Mutation returns the MachineMutation object of the builder.
func (muo *MachineUpdateOne) Mutation() *MachineMutation {
	return muo.mutation
}

// Save executes the query and returns the updated Machine entity.
func (muo *MachineUpdateOne) Save(ctx context.Context) (*Machine, error) {
	var (
		err  error
		node *Machine
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MachineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MachineUpdateOne) SaveX(ctx context.Context) *Machine {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MachineUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MachineUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MachineUpdateOne) sqlSave(ctx context.Context) (_node *Machine, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   machine.Table,
			Columns: machine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: machine.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Machine.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.Host(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldHost,
		})
	}
	if value, ok := muo.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: machine.FieldPort,
		})
	}
	if value, ok := muo.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: machine.FieldPort,
		})
	}
	if value, ok := muo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldUsername,
		})
	}
	if value, ok := muo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldPassword,
		})
	}
	if value, ok := muo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldComment,
		})
	}
	if value, ok := muo.mutation.Command(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: machine.FieldCommand,
		})
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: machine.FieldStatus,
		})
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: machine.FieldStatus,
		})
	}
	if value, ok := muo.mutation.Ctime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: machine.FieldCtime,
		})
	}
	if muo.mutation.CtimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: machine.FieldCtime,
		})
	}
	if value, ok := muo.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: machine.FieldMtime,
		})
	}
	if muo.mutation.MtimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: machine.FieldMtime,
		})
	}
	_node = &Machine{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{machine.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
