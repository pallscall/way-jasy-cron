// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"graduate/cron/internal/model/ent/job"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetName sets the name field.
func (jc *JobCreate) SetName(s string) *JobCreate {
	jc.mutation.SetName(s)
	return jc
}

// SetNillableName sets the name field if the given value is not nil.
func (jc *JobCreate) SetNillableName(s *string) *JobCreate {
	if s != nil {
		jc.SetName(*s)
	}
	return jc
}

// SetCreator sets the creator field.
func (jc *JobCreate) SetCreator(s string) *JobCreate {
	jc.mutation.SetCreator(s)
	return jc
}

// SetNillableCreator sets the creator field if the given value is not nil.
func (jc *JobCreate) SetNillableCreator(s *string) *JobCreate {
	if s != nil {
		jc.SetCreator(*s)
	}
	return jc
}

// SetURL sets the url field.
func (jc *JobCreate) SetURL(s string) *JobCreate {
	jc.mutation.SetURL(s)
	return jc
}

// SetNillableURL sets the url field if the given value is not nil.
func (jc *JobCreate) SetNillableURL(s *string) *JobCreate {
	if s != nil {
		jc.SetURL(*s)
	}
	return jc
}

// SetSpec sets the spec field.
func (jc *JobCreate) SetSpec(s string) *JobCreate {
	jc.mutation.SetSpec(s)
	return jc
}

// SetNillableSpec sets the spec field if the given value is not nil.
func (jc *JobCreate) SetNillableSpec(s *string) *JobCreate {
	if s != nil {
		jc.SetSpec(*s)
	}
	return jc
}

// SetComment sets the comment field.
func (jc *JobCreate) SetComment(s string) *JobCreate {
	jc.mutation.SetComment(s)
	return jc
}

// SetNillableComment sets the comment field if the given value is not nil.
func (jc *JobCreate) SetNillableComment(s *string) *JobCreate {
	if s != nil {
		jc.SetComment(*s)
	}
	return jc
}

// SetUpdater sets the updater field.
func (jc *JobCreate) SetUpdater(s string) *JobCreate {
	jc.mutation.SetUpdater(s)
	return jc
}

// SetNillableUpdater sets the updater field if the given value is not nil.
func (jc *JobCreate) SetNillableUpdater(s *string) *JobCreate {
	if s != nil {
		jc.SetUpdater(*s)
	}
	return jc
}

// SetMethod sets the method field.
func (jc *JobCreate) SetMethod(s string) *JobCreate {
	jc.mutation.SetMethod(s)
	return jc
}

// SetNillableMethod sets the method field if the given value is not nil.
func (jc *JobCreate) SetNillableMethod(s *string) *JobCreate {
	if s != nil {
		jc.SetMethod(*s)
	}
	return jc
}

// SetBody sets the body field.
func (jc *JobCreate) SetBody(s string) *JobCreate {
	jc.mutation.SetBody(s)
	return jc
}

// SetNillableBody sets the body field if the given value is not nil.
func (jc *JobCreate) SetNillableBody(s *string) *JobCreate {
	if s != nil {
		jc.SetBody(*s)
	}
	return jc
}

// SetHeader sets the header field.
func (jc *JobCreate) SetHeader(s string) *JobCreate {
	jc.mutation.SetHeader(s)
	return jc
}

// SetNillableHeader sets the header field if the given value is not nil.
func (jc *JobCreate) SetNillableHeader(s *string) *JobCreate {
	if s != nil {
		jc.SetHeader(*s)
	}
	return jc
}

// SetStoppable sets the stoppable field.
func (jc *JobCreate) SetStoppable(i int) *JobCreate {
	jc.mutation.SetStoppable(i)
	return jc
}

// SetNillableStoppable sets the stoppable field if the given value is not nil.
func (jc *JobCreate) SetNillableStoppable(i *int) *JobCreate {
	if i != nil {
		jc.SetStoppable(*i)
	}
	return jc
}

// SetStatus sets the status field.
func (jc *JobCreate) SetStatus(i int) *JobCreate {
	jc.mutation.SetStatus(i)
	return jc
}

// SetNillableStatus sets the status field if the given value is not nil.
func (jc *JobCreate) SetNillableStatus(i *int) *JobCreate {
	if i != nil {
		jc.SetStatus(*i)
	}
	return jc
}

// SetCtime sets the ctime field.
func (jc *JobCreate) SetCtime(t time.Time) *JobCreate {
	jc.mutation.SetCtime(t)
	return jc
}

// SetNillableCtime sets the ctime field if the given value is not nil.
func (jc *JobCreate) SetNillableCtime(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetCtime(*t)
	}
	return jc
}

// SetMtime sets the mtime field.
func (jc *JobCreate) SetMtime(t time.Time) *JobCreate {
	jc.mutation.SetMtime(t)
	return jc
}

// SetNillableMtime sets the mtime field if the given value is not nil.
func (jc *JobCreate) SetNillableMtime(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetMtime(*t)
	}
	return jc
}

// SetID sets the id field.
func (jc *JobCreate) SetID(i int) *JobCreate {
	jc.mutation.SetID(i)
	return jc
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	var (
		err  error
		node *Job
	)
	jc.defaults()
	if len(jc.hooks) == 0 {
		if err = jc.check(); err != nil {
			return nil, err
		}
		node, err = jc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jc.check(); err != nil {
				return nil, err
			}
			jc.mutation = mutation
			node, err = jc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(jc.hooks) - 1; i >= 0; i-- {
			mut = jc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (jc *JobCreate) defaults() {
	if _, ok := jc.mutation.Name(); !ok {
		v := job.DefaultName
		jc.mutation.SetName(v)
	}
	if _, ok := jc.mutation.Creator(); !ok {
		v := job.DefaultCreator
		jc.mutation.SetCreator(v)
	}
	if _, ok := jc.mutation.URL(); !ok {
		v := job.DefaultURL
		jc.mutation.SetURL(v)
	}
	if _, ok := jc.mutation.Spec(); !ok {
		v := job.DefaultSpec
		jc.mutation.SetSpec(v)
	}
	if _, ok := jc.mutation.Comment(); !ok {
		v := job.DefaultComment
		jc.mutation.SetComment(v)
	}
	if _, ok := jc.mutation.Updater(); !ok {
		v := job.DefaultUpdater
		jc.mutation.SetUpdater(v)
	}
	if _, ok := jc.mutation.Method(); !ok {
		v := job.DefaultMethod
		jc.mutation.SetMethod(v)
	}
	if _, ok := jc.mutation.Body(); !ok {
		v := job.DefaultBody
		jc.mutation.SetBody(v)
	}
	if _, ok := jc.mutation.Header(); !ok {
		v := job.DefaultHeader
		jc.mutation.SetHeader(v)
	}
	if _, ok := jc.mutation.Stoppable(); !ok {
		v := job.DefaultStoppable
		jc.mutation.SetStoppable(v)
	}
	if _, ok := jc.mutation.Status(); !ok {
		v := job.DefaultStatus
		jc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JobCreate) check() error {
	if _, ok := jc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := jc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := jc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New("ent: missing required field \"url\"")}
	}
	if _, ok := jc.mutation.Spec(); !ok {
		return &ValidationError{Name: "spec", err: errors.New("ent: missing required field \"spec\"")}
	}
	if _, ok := jc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New("ent: missing required field \"comment\"")}
	}
	if _, ok := jc.mutation.Updater(); !ok {
		return &ValidationError{Name: "updater", err: errors.New("ent: missing required field \"updater\"")}
	}
	if _, ok := jc.mutation.Method(); !ok {
		return &ValidationError{Name: "method", err: errors.New("ent: missing required field \"method\"")}
	}
	if _, ok := jc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New("ent: missing required field \"body\"")}
	}
	if _, ok := jc.mutation.Header(); !ok {
		return &ValidationError{Name: "header", err: errors.New("ent: missing required field \"header\"")}
	}
	if _, ok := jc.mutation.Stoppable(); !ok {
		return &ValidationError{Name: "stoppable", err: errors.New("ent: missing required field \"stoppable\"")}
	}
	if _, ok := jc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if v, ok := jc.mutation.ID(); ok {
		if err := job.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: jc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: job.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		}
	)
	if id, ok := jc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldName,
		})
		_node.Name = value
	}
	if value, ok := jc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := jc.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := jc.mutation.Spec(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldSpec,
		})
		_node.Spec = value
	}
	if value, ok := jc.mutation.Comment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldComment,
		})
		_node.Comment = value
	}
	if value, ok := jc.mutation.Updater(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldUpdater,
		})
		_node.Updater = value
	}
	if value, ok := jc.mutation.Method(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldMethod,
		})
		_node.Method = value
	}
	if value, ok := jc.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldBody,
		})
		_node.Body = value
	}
	if value, ok := jc.mutation.Header(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldHeader,
		})
		_node.Header = value
	}
	if value, ok := jc.mutation.Stoppable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: job.FieldStoppable,
		})
		_node.Stoppable = value
	}
	if value, ok := jc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: job.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := jc.mutation.Ctime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldCtime,
		})
		_node.Ctime = value
	}
	if value, ok := jc.mutation.Mtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldMtime,
		})
		_node.Mtime = value
	}
	return _node, _spec
}

// JobCreateBulk is the builder for creating a bulk of Job entities.
type JobCreateBulk struct {
	config
	builders []*JobCreate
}

// Save creates the Job entities in the database.
func (jcb *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Job, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (jcb *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
